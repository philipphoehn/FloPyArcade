import os
import sys
import matplotlib
from cx_Freeze import setup, Executable


# https://stackoverflow.com/questions/27281317/cx-freeze-preventing-including-unneeded-packages
# https://stackoverflow.com/questions/5523867/hide-console-window-with-tkinter-and-cx-freeze/11374527


includes = ['numpy.core._methods',
            'numpy.lib.format',
            # 'tkinter',
            # '_tkinter',
            # 'matplotlib',
            'matplotlib.backends.backend_tkagg']

excludes = [
            # 'collections',
            # 'ctypes',
            # 'dateutil',
            # 'distutils',
            # 'email',
            # 'encodings',
            # 'flopy',
            # 'http',
            # 'importlib',
            # 'json',
            # 'logging',
            # 'matplotlib',
            # 'numpy',
            # 'tkinter',
            # 'unittest',
            # 'urllib',

            '_pytest',
            'asciitree',
            'asyncio',
            'atomicwrites',
            'attr',
            'babel',
            'backcall',
            'bcolz',
            'blosc',
            'bokeh',
            'botocore',
            'bottleneck',
            'bs4',
            'bson',
            'ccplot.algorithms',
            'certifi',
            'cffi',
            'cftime',
            'chardet',
            'click',
            'cloudpickle',
            'colorama',
            'concurrent',
            'curses',
            'cvxopt',
            'cyordereddict',
            'Cython',
            'cytoolz',
            'dask',
            'dbm',
            'defusedxml',
            'descartes',
            # 'dill',
            'distributed',
            'docrepr',
            'docutils',
            'fasteners',
            'fastparquet',
            'feather',
            'funcsigs',
            'future',
            'graphviz',
            'h5py',
            'html',
            'html5lib',
            'idna',
            'ipykernel',
            'ipyparallel',
            'IPython',
            'ipython_genutils',
            'ipywidgets',
            'jedi',
            'jinja2',
            'joblib',
            'jsonschema',
            'jupyter_client',
            'jupyter_core',
            'keras',
            'Levenshtein',
            'lib2to3',
            'llvmlite',
            'locket',
            'lxml',
            'markupsafe',
            'more_itertools',
            'msgpack',
            'multiprocessing',
            'nbconvert',
            'nbformat',
            'netCDF4',
            'nose'
            'notebook',
            'numba',
            'numcodecs',
            'numdifftools',
            'numexpr',
            'numpydoc',
            'packaging',
            'pandas',
            'pandas_datareader',
            'parso',
            'partd',
            'patsy',
            'PIL',
            'pkg_resources',
            'pluggy',
            'prometheus_client',
            'prompt_toolkit',
            'psutil',
            'py',
            'pyarrow',
            'pycparser',
            'pydoc_data',
            'pygments',
            'PyQT'
            'PyQt5',
            'pyproj'
            'pytz',
            'pyximport',
            'qtpy',
            'requests',
            'scipy',
            'seaborn',
            'selenium',
            'send2trash',
            'setuptools',
            'simplejson',
            'sklearn',
            'snappy',
            'sortedcontainers',
            'sphinx',
            'sqlalchemy',
            'sqlite3',
            'statsmodels',
            'tables',
            'tblib',
            # 'tensorboard',
            # 'tensorflow',
            'terminado',
            'test',
            'testpath',
            'thrift',
            'toolz',
            'torch',
            'tornado',
            'traitlets',
            'urllib3',
            'wcwidth',
            'webencodings',
            'win32com',
            'winpty',
            'wsgiref',
            'xarray',
            'xlrd',
            'xlsxwriter',
            'xml',
            'xmlrpc',
            'yaml',
            'zarr',
            'zict',
            'zmq',
            ]

os.chdir('C:\\FloPyArcade\\')
os.environ['TCL_LIBRARY'] = r'C:\\Software\\WPy-3662\\python-3.6.6.amd64\\tcl\\tcl8.6'
os.environ['TK_LIBRARY'] = r'C:\\Software\\WPy-3662\\python-3.6.6.amd64\\tcl\\tk8.6'

if 'bdist_msi' in sys.argv:
    sys.argv += ['--initial-target-dir', 'C:\\' + 'FloPyArcade',
                 '-O', '-c', '-s',
                 '--target-dir', 'build',
                 'install-dir', 'build\\files']

exe = Executable(
      script="C:\\FloPyArcadeBuild\\FloPyArcadePlay.py",
      # base="Win32GUI",   # suppress console or not
      targetName="FloPyArcade.exe"
     )

build_exe_options = {"includes": includes,
                     "include_files": [(matplotlib.get_data_path(), "mpl-data"),
                                       r'C:\\Software\\WPy-3662\\python-3.6.6.amd64\\DLLs\\tcl86t.dll',
                                       r'C:\\Software\\WPy-3662\\python-3.6.6.amd64\\DLLs\\tk86t.dll'],
                     "excludes": excludes,
#                      "packages": ["matplotlib"],
                     }

setup(
      name="FloPyArcade.exe",
      options = {"build_exe": build_exe_options},
      version="0.1",
      author="Philipp Hoehn",
      description="FloPyArcade",
      executables=[exe]
      )


# in post: remove nose, pyproj, PyQt5, pytz, shapely